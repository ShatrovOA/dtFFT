name: dtfft workflow

on: [push]
jobs:
  ubuntu_openmpi:
    name: Ubuntu OpenMPI with Coverage
    runs-on: ubuntu-latest
    env:
      CC: "gcc-14"
      CXX: "g++-14"
      FC: "gfortran-14"
      DTFFT_ENABLE_LOG: "1"
    steps:
      - name: Get Requirements
        run: |
          sudo add-apt-repository -y ppa:ubuntu-toolchain-r/test
          sudo apt-get -q update
          sudo apt-get -y install gfortran-14
          sudo apt-get install libopenmpi-dev openmpi-bin
          sudo apt-get install libfftw3-dev
      - name: Checkout
        uses: actions/checkout@v4
      - name: Build
        run: |
          cmake -B build -S . \
            -DCMAKE_BUILD_TYPE=Debug \
            -DDTFFT_RUNNING_CICD=on \
            -DDTFFT_WITH_FFTW=on \
            -DDTFFT_MPI_VENDOR=openmpi \
            -DDTFFT_BUILD_C_CXX_API=on
          cmake --build build
      - name: Test
        run: cmake --build build --target coverage
      - name: Install
        run: sudo cmake --install build
      - name: Test install
        working-directory: ./tests/install
        run: |
          cmake -B build -S . -Ddtfft_DIR=/usr/local/lib/cmake/dtfft/
          cmake --build build
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}

  ubuntu_mpich:
    name: Ubuntu MPICH with persistent communications
    runs-on: ubuntu-22.04
    env:
      CC: "gcc-12"
      CXX: "g++-12"
      FC: "gfortran-12"
      DTFFT_ENABLE_LOG: "1"
    steps:
      - name: Get Requirements
        run: |
          sudo add-apt-repository -y ppa:ubuntu-toolchain-r/test
          sudo apt-get -q update
          sudo apt-get -y install gfortran-12
          sudo apt-get install mpich libmpich-dev
          sudo apt-get install libfftw3-dev
      - name: Checkout
        uses: actions/checkout@v4
      - name: Build
        run: |
          cmake -B build -S . \
            -DCMAKE_BUILD_TYPE=Debug \
            -DDTFFT_RUNNING_CICD=on \
            -DDTFFT_WITH_FFTW=on \
            -DDTFFT_ENABLE_PERSISTENT_COMM=on \
            -DDTFFT_BUILD_SHARED=off \
            -DDTFFT_BUILD_C_CXX_API=on
          cmake --build build
      - name: Test
        run: ctest --test-dir build --output-on-failure
      - name: Install
        run: sudo cmake --install build
      - name: Test install
        working-directory: ./tests/install
        run: |
          cmake -B build -S . -Ddtfft_DIR=/usr/local/lib/cmake/dtfft/
          cmake --build build

  macos_openmpi:
    name: macOS OpenMPI with persistent communications
    runs-on: macos-latest
    env:
      CC: "gcc-12"
      CXX: "g++-12"
      FC: "gfortran-12"
      DTFFT_ENABLE_LOG: "1"
    steps:
      - name: Get Requirements
        run: |
          brew install openmpi
          brew install fftw
      - name: Checkout
        uses: actions/checkout@v4
      - name: Build
        run: |
          cmake -B build -S . \
            -DCMAKE_BUILD_TYPE=Debug \
            -DDTFFT_RUNNING_CICD=on \
            -DDTFFT_WITH_FFTW=on \
            -DDTFFT_BUILD_SHARED=on \
            -DDTFFT_MPI_VENDOR=openmpi \
            -DDTFFT_ENABLE_PERSISTENT_COMM=on \
            -DDTFFT_BUILD_C_CXX_API=off
          cmake --build build
      - name: Test
        run: ctest --test-dir build --output-on-failure
      - name: Install
        run: sudo cmake --install build
      - name: Test install
        working-directory: ./tests/install
        run: |
          cmake -B build -S . -Ddtfft_DIR=/usr/local/lib/cmake/dtfft/
          cmake --build build

  macos_mpich:
    name: macOS MPICH
    runs-on: macos-latest
    env:
      CC: "gcc-14"
      CXX: "g++-14"
      FC: "gfortran-14"
      DTFFT_ENABLE_LOG: "1"
    steps:
      - name: Get Requirements
        run: |
          brew install mpich
          brew install ninja
      - name: Checkout
        uses: actions/checkout@v4
      - name: Build
        run: |
          cmake -B build -S . \
            -G Ninja \
            -DCMAKE_BUILD_TYPE=Release \
            -DDTFFT_RUNNING_CICD=on \
            -DDTFFT_BUILD_SHARED=on \
            -DDTFFT_BUILD_C_CXX_API=on \
            -DDTFFT_USE_MPI=on
          cmake --build build
      - name: Test
        run: ctest --test-dir build --output-on-failure
      - name: Install
        run: sudo cmake --install build
      - name: Test install
        working-directory: ./tests/install
        run: |
          cmake -B build -S . -Ddtfft_DIR=/usr/local/lib/cmake/dtfft/
          cmake --build build

  ubuntu_hpc_sdk:
    name: CUDA HPC-SDK
    runs-on: ubuntu-latest
    env:
      CC: "nvc"
      CXX: "nvc++"
      FC: "nvfortran"
      DTFFT_ENABLE_LOG: "1"
      LD_LIBRARY_PATH: "/opt/nvidia/hpc_sdk/Linux_x86_64/24.11/math_libs/12.6/lib64:
        /opt/nvidia/hpc_sdk/Linux_x86_64/24.11/comm_libs/12.6/nccl/lib:
        /opt/nvidia/hpc_sdk/Linux_x86_64/24.11/comm_libs/12.6/nvshmem/lib:$LD_LIBRARY_PATH"
    steps:
      - name: Get Requirements
        run: |
          echo 'deb [trusted=yes] https://developer.download.nvidia.com/hpc-sdk/ubuntu/amd64 /' | sudo tee /etc/apt/sources.list.d/nvhpc.list
          sudo apt-get update -y
          sudo apt-get -y install nvhpc-24-11
      - name: Checkout
        uses: actions/checkout@v4
      - name: Update PATH
        run: |
          echo "/opt/nvidia/hpc_sdk/Linux_x86_64/24.11/comm_libs/mpi/bin" >> $GITHUB_PATH
          echo "/opt/nvidia/hpc_sdk/Linux_x86_64/24.11/compilers/bin" >> $GITHUB_PATH
          echo "/opt/nvidia/hpc_sdk/Linux_x86_64/24.11/cuda/12.6/bin" >> $GITHUB_PATH
      - name: Build
        run: |
          cmake -B build -S . \
            -DCMAKE_BUILD_TYPE=Release \
            -DDTFFT_BUILD_TESTS=on \
            -DDTFFT_ENABLE_PERSISTENT_COMM=on \
            -DDTFFT_BUILD_SHARED=on \
            -DDTFFT_BUILD_C_CXX_API=on \
            -DDTFFT_WITH_PROFILER=on \
            -DDTFFT_WITH_CUDA=on \
            -DDTFFT_WITH_CUFFT=on \
            -DCMAKE_INSTALL_PREFIX=/opt/dtfft-cuda
          cmake --build build
      - name: Install
        run: sudo cmake --install build
      - name: Test install
        working-directory: ./tests/install
        run: |
          cmake -B build -S . -Ddtfft_DIR=/opt/dtfft-cuda/lib/cmake/dtfft/
          cmake --build build

  ubuntu_openmpi_cuda:
    name: Ubuntu OpenMPI with CUDA
    runs-on: ubuntu-24.04
    env:
      CC: "gcc-12"
      CXX: "g++-12"
      FC: "gfortran-12"
      DTFFT_ENABLE_LOG: "1"
      DTFFT_PLATFORM: "host"
      LD_LIBRARY_PATH: "/usr/local/cuda/targets/x86_64-linux/lib:$LD_LIBRARY_PATH"
    steps:
      - name: Get Requirements
        run: |
          wget https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2404/x86_64/cuda-ubuntu2404.pin
          sudo mv cuda-ubuntu2404.pin /etc/apt/preferences.d/cuda-repository-pin-600
          wget https://developer.download.nvidia.com/compute/cuda/12.8.0/local_installers/cuda-repo-ubuntu2404-12-8-local_12.8.0-570.86.10-1_amd64.deb
          sudo dpkg -i cuda-repo-ubuntu2404-12-8-local_12.8.0-570.86.10-1_amd64.deb
          sudo cp /var/cuda-repo-ubuntu2404-12-8-local/cuda-*-keyring.gpg /usr/share/keyrings/
          sudo add-apt-repository -y ppa:ubuntu-toolchain-r/test
          sudo apt-get -q update
          sudo apt-get -y install gfortran-12
          sudo apt-get install libopenmpi-dev openmpi-bin
          sudo apt-get install libfftw3-dev
          sudo apt-get -y install cuda-toolkit-12-8
      - name: Checkout
        uses: actions/checkout@v4
      - name: Build
        run: |
          cmake -B build -S . \
            -DCMAKE_BUILD_TYPE=Debug \
            -DDTFFT_RUNNING_CICD=on \
            -DDTFFT_WITH_FFTW=on \
            -DDTFFT_WITH_CUFFT=on \
            -DDTFFT_ENABLE_PERSISTENT_COMM=on \
            -DDTFFT_BUILD_SHARED=on \
            -DDTFFT_BUILD_C_CXX_API=on \
            -DDTFFT_WITH_CUDA=on \
            -DDTFFT_MPI_VENDOR=openmpi
          cmake --build build
      - name: Test
        run: cmake --build build --target coverage
      - name: Install
        run: sudo cmake --install build
      - name: Test install
        working-directory: ./tests/install
        run: |
          cmake -B build -S . -Ddtfft_DIR=/usr/local/lib/cmake/dtfft/
          cmake --build build

  intel:
    name: Intel OneAPI build
    runs-on: ubuntu-latest
    env:
      CC: "icx"
      CXX: "icpx"
      FC: "ifx"
      DTFFT_ENABLE_LOG: "1"
    steps:
      - name: Get Requirements
        run: |
          sudo echo "deb [trusted=yes] https://apt.repos.intel.com/oneapi all main" | sudo tee /etc/apt/sources.list.d/oneAPI.list
          sudo apt-get update -y
          sudo apt install -y intel-oneapi-base-toolkit intel-oneapi-hpc-toolkit
      - name: Checkout
        uses: actions/checkout@v4
      - name: Build
        run: |
          source /opt/intel/oneapi/setvars.sh
          cmake -B build -S . \
            -DCMAKE_BUILD_TYPE=Debug \
            -DDTFFT_BUILD_TESTS=on \
            -DDTFFT_ENABLE_PERSISTENT_COMM=on \
            -DDTFFT_BUILD_SHARED=on \
            -DDTFFT_WITH_MKL=on \
            -DDTFFT_USE_MPI=on \
            -DDTFFT_BUILD_C_CXX_API=on
          cmake --build build
      - name: Test
        run: |
          source /opt/intel/oneapi/setvars.sh
          ctest --test-dir build --output-on-failure
      - name: Install
        run: sudo cmake --install build
      - name: Test install
        working-directory: ./tests/install
        run: |
          source /opt/intel/oneapi/setvars.sh
          cmake -B build -S . -Ddtfft_DIR=/usr/local/lib/cmake/dtfft/
          cmake --build build
